{"ast":null,"code":"var _jsxFileName = \"E:\\\\React Project\\\\taskmanager\\\\src\\\\contexts\\\\TaskListContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useState, useEffect } from 'react';\nimport { v1 as uuid } from \"uuid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TaskListContext = /*#__PURE__*/createContext();\n\nconst TaskListContextProvider = props => {\n  _s();\n\n  const initialState = JSON.parse(localStorage.getItem('tasks')) || [];\n  const [tasks, setTasks] = useState(initialState);\n  useEffect(() => {\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n  }, [tasks]);\n  const [editItem, setEditItem] = useState(null); // Add tasks\n\n  const addTask = title => {\n    setTasks([...tasks, {\n      title,\n      id: uuid()\n    }]);\n  }; // Remove tasks\n\n\n  const removeTask = id => {\n    setTasks(tasks.filter(task => task.id !== id));\n  }; // Clear tasks\n\n\n  const clearList = () => {\n    setTasks([]);\n  }; // Find task\n\n\n  const findItem = id => {\n    const item = tasks.find(task => task.id === id);\n    setEditItem(item);\n  }; // Edit task\n\n\n  const editTask = (title, id) => {\n    const newTasks = tasks.map(task => task.id === id ? {\n      title,\n      id\n    } : task);\n    console.log(newTasks);\n    setTasks(newTasks);\n    setEditItem(null);\n  };\n\n  return /*#__PURE__*/_jsxDEV(TaskListContext.Provider, {\n    value: {\n      tasks,\n      addTask,\n      removeTask,\n      clearList,\n      findItem,\n      editTask,\n      editItem\n    },\n    children: [\" \", props.children, \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 18\n  }, this);\n};\n\n_s(TaskListContextProvider, \"0gbdL5WNrOS2J4V4j6uj+dFvfW8=\");\n\n_c = TaskListContextProvider;\nexport default TaskListContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskListContextProvider\");","map":{"version":3,"sources":["E:/React Project/taskmanager/src/contexts/TaskListContext.js"],"names":["React","createContext","useState","useEffect","v1","uuid","TaskListContext","TaskListContextProvider","props","initialState","JSON","parse","localStorage","getItem","tasks","setTasks","setItem","stringify","editItem","setEditItem","addTask","title","id","removeTask","filter","task","clearList","findItem","item","find","editTask","newTasks","map","console","log","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,EAAyCC,SAAzC,QAA0D,OAA1D;AACA,SAASC,EAAE,IAAIC,IAAf,QAA2B,MAA3B;;AACA,OAAO,MAAMC,eAAe,gBAAGL,aAAa,EAArC;;AACP,MAAMM,uBAAuB,GAAGC,KAAK,IAAI;AAAA;;AACjC,QAAMC,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,KAA6C,EAAlE;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAACO,YAAD,CAAlC;AACAN,EAAAA,SAAS,CAAC,MAAM;AACZS,IAAAA,YAAY,CAACI,OAAb,CAAqB,OAArB,EAA8BN,IAAI,CAACO,SAAL,CAAeH,KAAf,CAA9B;AACH,GAFQ,EAEN,CAACA,KAAD,CAFM,CAAT;AAGA,QAAM,CAACI,QAAD,EAAWC,WAAX,IAA0BjB,QAAQ,CAAC,IAAD,CAAxC,CANiC,CAO7B;;AACJ,QAAMkB,OAAO,GAAGC,KAAK,IAAI;AACjBN,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAW;AAAEO,MAAAA,KAAF;AAASC,MAAAA,EAAE,EAAEjB,IAAI;AAAjB,KAAX,CAAD,CAAR;AACH,GAFL,CARiC,CAW7B;;;AACJ,QAAMkB,UAAU,GAAGD,EAAE,IAAI;AACjBP,IAAAA,QAAQ,CAACD,KAAK,CAACU,MAAN,CAAaC,IAAI,IAAIA,IAAI,CAACH,EAAL,KAAYA,EAAjC,CAAD,CAAR;AACH,GAFL,CAZiC,CAe7B;;;AACJ,QAAMI,SAAS,GAAG,MAAM;AAChBX,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACH,GAFL,CAhBiC,CAmB7B;;;AACJ,QAAMY,QAAQ,GAAGL,EAAE,IAAI;AACf,UAAMM,IAAI,GAAGd,KAAK,CAACe,IAAN,CAAWJ,IAAI,IAAIA,IAAI,CAACH,EAAL,KAAYA,EAA/B,CAAb;AACAH,IAAAA,WAAW,CAACS,IAAD,CAAX;AACH,GAHL,CApBiC,CAwB7B;;;AACJ,QAAME,QAAQ,GAAG,CAACT,KAAD,EAAQC,EAAR,KAAe;AAC5B,UAAMS,QAAQ,GAAGjB,KAAK,CAACkB,GAAN,CAAUP,IAAI,IAAKA,IAAI,CAACH,EAAL,KAAYA,EAAZ,GAAiB;AAAED,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAjB,GAAiCG,IAApD,CAAjB;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACAhB,IAAAA,QAAQ,CAACgB,QAAD,CAAR;AACAZ,IAAAA,WAAW,CAAC,IAAD,CAAX;AACH,GALD;;AAMA,sBAAS,QAAE,eAAF,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EACjC;AACIL,MAAAA,KADJ;AAEIM,MAAAA,OAFJ;AAGIG,MAAAA,UAHJ;AAIIG,MAAAA,SAJJ;AAKIC,MAAAA,QALJ;AAMIG,MAAAA,QANJ;AAOIZ,MAAAA;AAPJ,KADC;AAAA,oBAUCV,KAAK,CAAC2B,QAVP;AAAA;AAAA;AAAA;AAAA;AAAA,UAAT;AAWC,CA1CT;;GAAM5B,uB;;KAAAA,uB;AA2CE,eAAeA,uBAAf","sourcesContent":["import React, { createContext, useState, useEffect } from 'react'\r\nimport { v1 as uuid } from \"uuid\";\r\nexport const TaskListContext = createContext()\r\nconst TaskListContextProvider = props => {\r\n        const initialState = JSON.parse(localStorage.getItem('tasks')) || []\r\n        const [tasks, setTasks] = useState(initialState)\r\n        useEffect(() => {\r\n            localStorage.setItem('tasks', JSON.stringify(tasks))\r\n        }, [tasks])\r\n        const [editItem, setEditItem] = useState(null)\r\n            // Add tasks\r\n        const addTask = title => {\r\n                setTasks([...tasks, { title, id: uuid() }])\r\n            }\r\n            // Remove tasks\r\n        const removeTask = id => {\r\n                setTasks(tasks.filter(task => task.id !== id))\r\n            }\r\n            // Clear tasks\r\n        const clearList = () => {\r\n                setTasks([])\r\n            }\r\n            // Find task\r\n        const findItem = id => {\r\n                const item = tasks.find(task => task.id === id)\r\n                setEditItem(item)\r\n            }\r\n            // Edit task\r\n        const editTask = (title, id) => {\r\n            const newTasks = tasks.map(task => (task.id === id ? { title, id } : task))\r\n            console.log(newTasks)\r\n            setTasks(newTasks)\r\n            setEditItem(null)\r\n        }\r\n        return ( < TaskListContext.Provider value = {\r\n                {\r\n                    tasks,\r\n                    addTask,\r\n                    removeTask,\r\n                    clearList,\r\n                    findItem,\r\n                    editTask,\r\n                    editItem\r\n                }\r\n            } > { props.children } </TaskListContext.Provider>)\r\n        }\r\n        export default TaskListContextProvider"]},"metadata":{},"sourceType":"module"}